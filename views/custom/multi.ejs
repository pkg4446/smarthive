<script src="https://cdn.jsdelivr.net/npm/echarts@5.4.2/dist/echarts.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script type="text/javascript">

    let farmIP = "192.168.1.10"//"0.0.0.0";

    const GET_DATA  = {};
    const API_DAY   = {
        START: null,
        END:   null,
    };    

    window.onload = function() { // 페이지 로드 시 실행 
        document.getElementById("farmIP").value = farmIP;
        API_DAY.START = new Date();
        API_DAY.END   = new Date();
        API_DAY.START.setDate(API_DAY.END.getDate()-7);
        API_DAY.END.setDate(API_DAY.END.getDate()+8);
        document.getElementById("start").value  = API_DAY.START.toISOString().split("T")[0];
        document.getElementById("end").value    = API_DAY.END.toISOString().split("T")[0];
    }    

    function changeIP(DATA) {
        farmIP = DATA;        
    }

    function periode(TYPE,DATA) {
        API_DAY[TYPE] = DATA;
        if(API_DAY.END && (API_DAY.START>API_DAY.END)){
            const TEMPORARY = API_DAY.END;
            API_DAY.END     = API_DAY.START;
            API_DAY.START   = TEMPORARY;
            document.getElementById("start").value  = API_DAY.START;
            document.getElementById("end").value    = API_DAY.END;
        }
    }

    function submitfn(API,DATA){
        let POST = false;
        let sendData = null;
        if(API == "costom/device") {
            POST = true;
            sendData = {IP:farmIP};
        }else if(API == "costom/read" && API_DAY.START && API_DAY.END){
            POST = true;
            sendData = API_DAY;
            sendData.MODULE = DATA;
        }else if(API == "costom/rename" && DATA.MODULE && DATA.NAME){
            POST = true;
            sendData = DATA;
        }

        if(POST){
            $.ajax({
                contentType: "application/json; charset=utf-8",
                url : '/api/' + API,
                type : 'POST', 
                dataType:'json',
                data : JSON.stringify(sendData), 
                success : function(response) {  
                    console.log(response);
                    if(API == "costom/device" && response.result){
                        deviceBTN(response.data);
                    }else if(API == "costom/read" && response.result){
                        graphDrawing(response.data);
                    }else if(API == "costom/rename" && response.result){
                        Swal.fire({              
                            position: 'top',
                            icon: 'success',
                            title: "Confirm!",
                            text: "이름이 수정되었습니다.",
                            showConfirmButton: false,                                    
                            timer: 1500
                        })
                    }
                }, // success 
                error : function(xhr, status) {
                    Swal.fire({              
                        position: 'top',
                        icon: 'error',
                        title: xhr,
                        text: status,
                        showConfirmButton: false,                                    
                        timer: 1500
                    })
                }
            }); // $.ajax 
        }
    }

    function downloadFile(MODULE) {        
        if(GET_DATA[MODULE] != undefined){
            let csv_file    = "DEVICE_ID," + GET_DATA[MODULE][0].MODULE + "\r\n";
            csv_file       += "Timestamp,Temperature1(°C),Temperature2(°C),Temperature3(°C),Temperature4(°C),Temperature5(°C),Temperature6(°C),Temperature7(°C),Temperature8(°C),Humidity1(%),Humidity2(%),Humidity3(%),Humidity4(%),Humidity5(%),Humidity6(%),Humidity7(%),Humidity8(%)\r\n";
            for (let index  = GET_DATA[MODULE].length-1; index >= 0; index--) {
                csv_file += `${GET_DATA[MODULE][index].TMST},${GET_DATA[MODULE][index].TEMP1/100},${GET_DATA[MODULE][index].TEMP2/100},${GET_DATA[MODULE][index].TEMP3/100},${GET_DATA[MODULE][index].TEMP4/100},${GET_DATA[MODULE][index].TEMP5/100},${GET_DATA[MODULE][index].TEMP6/100},${GET_DATA[MODULE][index].TEMP7/100},${GET_DATA[MODULE][index].TEMP8/100},`+
                            `${GET_DATA[MODULE][index].HUMI1/100},${GET_DATA[MODULE][index].HUMI2/100},${GET_DATA[MODULE][index].HUMI3/100},${GET_DATA[MODULE][index].HUMI4/100},${GET_DATA[MODULE][index].HUMI5/100},${GET_DATA[MODULE][index].HUMI6/100},${GET_DATA[MODULE][index].HUMI7/100},${GET_DATA[MODULE][index].HUMI8/100}\r\n`;
            }
            const blob  = new Blob([csv_file], {type: 'text/csv;charset=utf-8;'});
            const fileObjectUrl = window.URL.createObjectURL(blob);
            const link  = document.createElement("a");
            link.href   = fileObjectUrl;
            link.style.display = "none";
            const START = GET_DATA[MODULE][0].TMST;
            const END   = GET_DATA[MODULE][GET_DATA[MODULE].length-1].TMST;
            link.download = MODULE + "_LOG_" + START + "_to_" + END + ".csv";
            document.body.appendChild(link);
            link.click();
            link.remove();
            window.URL.revokeObjectURL(fileObjectUrl);
        }else{
            Swal.fire({              
                position: 'top',
                icon: 'error',
                title: "No Data!",
                text: "그래프 버튼을 누른 후 다시 시도해주세요.",
                showConfirmButton: false,                                    
                timer: 1500
            })
        }
    }

    function NameChange(TYPE,MODULE){
        let HTML_View   = '';
        let HTML_BTN    = '';
        if(TYPE){
            HTML_View   = document.getElementById(MODULE+"_Name").value;
            HTML_BTN    = `<span class="button fit" onclick="NameChange(false,'${MODULE}')">이름변경</span>`;
            submitfn('costom/rename',{MODULE:MODULE,NAME:HTML_View})
        }else{
            const Name  = document.getElementById(MODULE+"_NameView").innerText;
            HTML_View   = `<input id="${MODULE}_Name" type="text" value="${Name}" maxlength="16">`;
            HTML_BTN    = `<span class="button fit" onclick="NameChange(true,'${MODULE}')">확인</span>`;
        }        
        console.log(HTML_View,HTML_BTN)
        document.getElementById(MODULE+"_NameView").innerHTML   = HTML_View;
        document.getElementById(MODULE+"_NameBTN").innerHTML    = HTML_BTN;
    }

    function deviceBTN(ARRAY) {
        let HTML_Text = '<div class="col-12"><div class="row gtr-uniform">'
        for (const SENSOR of ARRAY) {
            HTML_Text += `<div class="col-3 col-6-small"id="${SENSOR.MODULE}_NameView">${SENSOR.NAME}</div>
                        <div class="col-2 col-6-small"  id="${SENSOR.MODULE}_NameBTN"><span class="button fit" onclick="NameChange(false,'${SENSOR.MODULE}')">이름변경</span></div>                        
                        <div class="col-2 col-12-small"><span class="button fit" onclick="downloadFile('${SENSOR.MODULE}')">저장하기</span></div>
                        <div class="col-5 col-12-small"><span class="button primary fit" onclick="submitfn('costom/read','${SENSOR.MODULE}')">그래프</span></div>
                        <div class="col-4 col-12-small" id="${SENSOR.MODULE}_Temp_ring" style="height:400px;"></div>
                        <div class="col-8 col-12-small" id="${SENSOR.MODULE}_Temp" style="height:400px;"></div>
                        <div class="col-4 col-12-small" id="${SENSOR.MODULE}_Humi_ring" style="height:400px;"></div>
                        <div class="col-8 col-12-small" id="${SENSOR.MODULE}_Humi" style="height:400px;"></div>`;
        }        
        HTML_Text += '</div></div>'
        document.getElementById("chartForm").innerHTML = HTML_Text;
    }

    function graphDrawing(ARRAY) {        
        let chartData   = [["Time","Temp","Humi","Area"]];
        if(ARRAY.length){       
            GET_DATA[ARRAY[0].MODULE] = ARRAY;
            for (const iterator of ARRAY) {
                const TSMT  = new Date(iterator.TMST);
                const time  = ((((TSMT.getYear()-100)*100+(TSMT.getMonth()+1))*100+TSMT.getDate())+TSMT.getHours()/100+TSMT.getMinutes()/10000+TSMT.getSeconds()/1000000).toFixed(6);
                chartData.push([time,iterator.TEMP1/100,iterator.HUMI1/100,"Sensor1"]);
                chartData.push([time,iterator.TEMP2/100,iterator.HUMI2/100,"Sensor2"]);
                chartData.push([time,iterator.TEMP3/100,iterator.HUMI3/100,"Sensor3"]);
                chartData.push([time,iterator.TEMP4/100,iterator.HUMI4/100,"Sensor4"]);
                chartData.push([time,iterator.TEMP5/100,iterator.HUMI5/100,"Sensor5"]);
                chartData.push([time,iterator.TEMP6/100,iterator.HUMI6/100,"Sensor6"]);
                chartData.push([time,iterator.TEMP7/100,iterator.HUMI7/100,"Sensor7"]);
                chartData.push([time,iterator.TEMP8/100,iterator.HUMI8/100,"Sensor8"]);
            }        
            const MODULE = ARRAY[0].MODULE;
            drawChart(MODULE,"Temp",chartData);
            drawChart(MODULE,"Humi",chartData)
            drawGauge(MODULE,"Temp",ARRAY,'°C');
            drawGauge(MODULE,"Humi",ARRAY,'%');

        }else{
            Swal.fire({              
                position: 'top',
                icon: 'error',
                title: "No Data!",
                text: "해당 기간동안 저장된 데이터가 없습니다.",
                showConfirmButton: false,                                    
                timer: 1500
            })
        }
    }

    function drawGauge(divID,TYPE,_rawData,Unit){
        let myChart = echarts.init(document.getElementById(`${divID}_${TYPE}_ring`));

        const gaugeData = [ 
            {
                detail: {
                valueAnimation: true,   
                offsetCenter: ['-25%', '-30%']
                }
            }, 
            {
                detail: {
                valueAnimation: true,       
                offsetCenter: ['-25%', '-10%']
                }
            }, 
            {
                value: 0,
                detail: {
                valueAnimation: true,   
                offsetCenter: ['-25%', '10%']
                }
            }, 
            {
                value: 0,
                detail: {
                valueAnimation: true,   
                offsetCenter: ['-25%', '30%']
                }
            }, 
            {
                detail: {
                valueAnimation: true,   
                offsetCenter: ['25%', '-30%']
                }
            }, 
            {
                detail: {
                valueAnimation: true,       
                offsetCenter: ['25%', '-10%']
                }
            }, 
            {
                value: 0,
                detail: {
                valueAnimation: true,   
                offsetCenter: ['25%', '10%']
                }
            }, 
            {
                value: 0,
                detail: {
                valueAnimation: true,   
                offsetCenter: ['25%', '30%']
                }
            }, 
                
        ];

        const option = {
            series: [
                {
                    type: 'gauge',
                    startAngle: -90,
                    endAngle:   270,
                    pointer: {
                        show: false
                    },
                    progress: {
                        show: true,
                        overlap: false,
                        roundCap: true,
                        clip: false,
                        itemStyle: {
                        borderWidth: 1,
                        borderColor: '#464646'
                        }
                    },
                    axisLine: {
                        lineStyle: {
                        width: 50
                        }
                    },
                    splitLine: {
                        show: false,
                        distance: 0,
                        length: 10
                    },
                    axisTick: {
                        show: false
                    },
                    axisLabel: {
                        show: false,
                        distance: 50
                    },
                    data: gaugeData,
                    detail: {
                        width: 40,
                        height: 10,
                        fontSize: 12,
                        color: 'inherit',
                        borderColor: 'inherit',
                        borderRadius: 20,
                        borderWidth: 2,
                        formatter: '{value}'+Unit
                    }
                }
            ]
        };

        let dataIndex = 0;
        const upperCaseStr = TYPE.toUpperCase();        
        
        let interval = setInterval(function () {
            gaugeData[0].value = +(_rawData[dataIndex][upperCaseStr+"1"]/100).toFixed(2);
            gaugeData[1].value = +(_rawData[dataIndex][upperCaseStr+"2"]/100).toFixed(2);
            gaugeData[2].value = +(_rawData[dataIndex][upperCaseStr+"3"]/100).toFixed(2);
            gaugeData[3].value = +(_rawData[dataIndex][upperCaseStr+"4"]/100).toFixed(2);
            gaugeData[4].value = +(_rawData[dataIndex][upperCaseStr+"5"]/100).toFixed(2);
            gaugeData[5].value = +(_rawData[dataIndex][upperCaseStr+"6"]/100).toFixed(2);
            gaugeData[6].value = +(_rawData[dataIndex][upperCaseStr+"7"]/100).toFixed(2);
            gaugeData[7].value = +(_rawData[dataIndex][upperCaseStr+"8"]/100).toFixed(2);
            dataIndex++;
            if(dataIndex >= _rawData.length)  clearInterval(interval);
            myChart.setOption({
                series: [
                {
                    data: gaugeData,
                    pointer: {
                    show: false
                    }
                }
                ]
            });
        }, Math.round(60*1000/_rawData.length));
        option && myChart.setOption(option);
    }

    function drawChart (divID,TYPE,_rawData) {      
        let myChart = echarts.init(document.getElementById(`${divID}_${TYPE}`));

        const X_Axis = [
            'Sensor1',
            'Sensor2',
            'Sensor3',
            'Sensor4',
            'Sensor5',
            'Sensor6',
            'Sensor7',
            'Sensor8',
        ];
        const datasetWithFilters = [];
        const seriesList = [];
        echarts.util.each(X_Axis, function (area) {
            var datasetId = 'dataset_' + area;
            datasetWithFilters.push({
            id: datasetId,
            fromDatasetId: 'dataset_raw',
            transform: {
                type: 'filter',
                config: {
                and: [
                    { dimension: 'Time', gte: 230400 },
                    { dimension: 'Area', '=': area }
                ]
                }
            }
            });
            seriesList.push({
            type: 'line',
            datasetId: datasetId,
            showSymbol: false,
            name: area,
            endLabel: {
                show: true,
                formatter: function (params) {
                return params.value[3];
                }
            },
            labelLayout: {
                moveOverlap: 'shiftY'
            },
            emphasis: {
                focus: 'series'
            },
            encode: {
                x: 'Time',
                y: TYPE,
                label: ['Area', TYPE],
                itemName: 'Time',
                tooltip: [TYPE]
            }
            });
        });
        const option = {
            animationDuration: 3000,
            dataset: [
            {
                id: 'dataset_raw',
                source: _rawData
            },
            ...datasetWithFilters
            ],
            title: {
            text: TYPE
            },
            tooltip: {
            order: 'valueDesc',
            trigger: 'axis'
            },
            xAxis: {
            type: 'category',
            nameLocation: 'middle'
            },
            yAxis: {
            name: TYPE
            },
            grid: {
            right: 140
            },
            series: seriesList
        };
        option && myChart.setOption(option);
    }
</script>

<div id="main" class="alt">
    <div class="inner">
        <section>
            <div class="row gtr-uniform">
                <div class="col-1 col-1-small">IP:</div>
                <div class="col-2 col-11-small"><input type="text" id="farmIP" onchange="changeIP(this.value)" value="0.0.0.0"></div>
                <div class="col-1 col-1-small">S:</div>
                <div class="col-2 col-5-small"><input type="date" id="start" onchange="periode('START',this.value)"></div>
                <div class="col-1 col-1-small">E:</div>
                <div class="col-2 col-5-small"><input type="date" id="end" onchange="periode('END',this.value)"></div>
                <div class="col-3 col-12-small"><span class="button primary fit" onclick="submitfn('costom/device',null)">불러오기</span></div>
            </div>            
        </section>
        <br>
        <section>
            <div class="row gtr-uniform" id="chartForm">                
            </div>                    
        </section>        
    </div>
</div>