<script src="https://cdn.jsdelivr.net/npm/echarts@5.4.2/dist/echarts.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script type="text/javascript">

    let farmIP = "192.168.1.3"//"0.0.0.0";

    const API_DAY   = {
        START: null,
        END:   null,
    };    

    window.onload = function() { // 페이지 로드 시 실행 
        API_DAY.START = new Date();
        API_DAY.END   = new Date();
        API_DAY.START.setDate(API_DAY.END.getDate()-7);
        API_DAY.END.setDate(API_DAY.END.getDate()+8);
        document.getElementById("start").value  = API_DAY.START.toISOString().split("T")[0];
        document.getElementById("end").value    = API_DAY.END.toISOString().split("T")[0];
    }    

    function changeIP(DATA) {
        farmIP = DATA;        
    }

    function periode(TYPE,DATA) {
        API_DAY[TYPE] = DATA;
        if(API_DAY.END && (API_DAY.START>API_DAY.END)){
            const TEMPORARY = API_DAY.END;
            API_DAY.END     = API_DAY.START;
            API_DAY.START   = TEMPORARY;
            document.getElementById("start").value  = API_DAY.START;
            document.getElementById("end").value    = API_DAY.END;
        }
    }

    function submitfn(API,DATA){
        let POST = false;
        let sendData = null;
        if(API == "costom/device") {
            POST = true;
            sendData = {IP:farmIP};
        }else if(API == "costom/read" && API_DAY.START && API_DAY.END){
            POST = true;
            sendData = API_DAY;
            sendData.MODULE = DATA;
        }

        if(POST){
            $.ajax({
                contentType: "application/json; charset=utf-8",
                url : '/api/' + API,
                type : 'POST', 
                dataType:'json',
                data : JSON.stringify(sendData), 
                success : function(response) {  
                    console.log(response);
                    if(API == "costom/device" && response.result){
                        deviceBTN(response.data);
                    }else if(API == "costom/read" && response.result){
                        chartDrawing(response.data);
                    }
                }, // success 
                error : function(xhr, status) {
                    alert(xhr + " : " + status);
                    console.log(xhr,sendData);
                }                
            }); // $.ajax 
        }
    }

    function deviceBTN(ARRAY) {
        let HTML_Text = '<div class="col-12"><div class="row gtr-uniform">'
        for (const SENSOR of ARRAY) {
            HTML_Text += `<div class="col-3 col-12-small">${SENSOR.NAME}</div>
                        <div class="col-3 col-12-small"><span class="button fit" onclick="submitfn('costom/name','${SENSOR.NAME}')">이름변경</span></div>
                        <div class="col-6 col-12-small"><span class="button primary fit" onclick="submitfn('costom/read','${SENSOR.MODULE}')">그래프</span></div>
                        <div class="col-6 col-12-small" id="${SENSOR.MODULE}_Temp" style="height:500px;"></div>
                        <div class="col-6 col-12-small" id="${SENSOR.MODULE}_Humi" style="height:500px;"></div>`;
        }        
        HTML_Text += '</div></div>'
        document.getElementById("chartForm").innerHTML = HTML_Text;
    }

    function chartDrawing(ARRAY) {
        let chartData   = [["Time","Temp","Humi","Area"]];
        if(ARRAY.length){         
            for (const iterator of ARRAY) {
                const TSMT  = new Date(iterator.TMST);
                const time  = ((((TSMT.getYear()-100)*100+(TSMT.getMonth()+1))*100+TSMT.getDate())+TSMT.getHours()/100+TSMT.getMinutes()/10000+TSMT.getSeconds()/1000000).toFixed(6);
                chartData.push([time,iterator.TEMP1/100,iterator.HUMI1/100,"Sensor1"]);
                chartData.push([time,iterator.TEMP2/100,iterator.HUMI2/100,"Sensor2"]);
                chartData.push([time,iterator.TEMP3/100,iterator.HUMI3/100,"Sensor3"]);
                chartData.push([time,iterator.TEMP4/100,iterator.HUMI4/100,"Sensor4"]);
                chartData.push([time,iterator.TEMP5/100,iterator.HUMI5/100,"Sensor5"]);
                chartData.push([time,iterator.TEMP6/100,iterator.HUMI6/100,"Sensor6"]);
                chartData.push([time,iterator.TEMP7/100,iterator.HUMI7/100,"Sensor7"]);
                chartData.push([time,iterator.TEMP8/100,iterator.HUMI8/100,"Sensor8"]);
                /*
                chartData.push([iterator.IDX,iterator.TEMP1,iterator.HUMI1,"Sensor1"]);
                chartData.push([iterator.IDX,iterator.TEMP2,iterator.HUMI2,"Sensor2"]);
                chartData.push([iterator.IDX,iterator.TEMP3,iterator.HUMI3,"Sensor3"]);
                chartData.push([iterator.IDX,iterator.TEMP4,iterator.HUMI4,"Sensor4"]);
                chartData.push([iterator.IDX,iterator.TEMP5,iterator.HUMI5,"Sensor5"]);
                chartData.push([iterator.IDX,iterator.TEMP6,iterator.HUMI6,"Sensor6"]);
                chartData.push([iterator.IDX,iterator.TEMP7,iterator.HUMI7,"Sensor7"]);
                chartData.push([iterator.IDX,iterator.TEMP8,iterator.HUMI8,"Sensor8"]);
                */
            }        
            const MODULE = ARRAY[0].MODULE;
            drawChart(MODULE,"Temp",chartData);
            drawChart(MODULE,"Humi",chartData)

        }else{alert("No Data!");}
        
    }

    function drawChart (divID,TYPE,_rawData) {      
        let myChart = echarts.init(document.getElementById(`${divID}_${TYPE}`));

        const X_Axis = [
            'Sensor1',
            'Sensor2',
            'Sensor3',
            'Sensor4',
            'Sensor5',
            'Sensor6',
            'Sensor7',
            'Sensor8',
        ];
        const datasetWithFilters = [];
        const seriesList = [];
        echarts.util.each(X_Axis, function (area) {
            var datasetId = 'dataset_' + area;
            datasetWithFilters.push({
            id: datasetId,
            fromDatasetId: 'dataset_raw',
            transform: {
                type: 'filter',
                config: {
                and: [
                    { dimension: 'Time', gte: 230400 },
                    { dimension: 'Area', '=': area }
                ]
                }
            }
            });
            seriesList.push({
            type: 'line',
            datasetId: datasetId,
            showSymbol: false,
            name: area,
            endLabel: {
                show: true,
                formatter: function (params) {
                return params.value[3];
                }
            },
            labelLayout: {
                moveOverlap: 'shiftY'
            },
            emphasis: {
                focus: 'series'
            },
            encode: {
                x: 'Time',
                y: TYPE,
                label: ['Area', TYPE],
                itemName: 'Time',
                tooltip: [TYPE]
            }
            });
        });
        const option = {
            animationDuration: 1000,
            dataset: [
            {
                id: 'dataset_raw',
                source: _rawData
            },
            ...datasetWithFilters
            ],
            title: {
            text: TYPE
            },
            tooltip: {
            order: 'valueDesc',
            trigger: 'axis'
            },
            xAxis: {
            type: 'category',
            nameLocation: 'middle'
            },
            yAxis: {
            name: TYPE
            },
            grid: {
            right: 140
            },
            series: seriesList
        };
        myChart.setOption(option);
    }
</script>

<div id="main" class="alt">
    <div class="inner">
        <section>
            <div class="row gtr-uniform">
                <div class="col-1 col-1-small">IP:</div>
                <div class="col-3 col-11-small"><input type="text" id="farmIP" onchange="changeIP(this.value)" value="192.168.1.3"></div>
                <div class="col-3 col-6-small">시작:<input type="date" id="start" onchange="periode('START',this.value)"></div>
                <div class="col-3 col-6-small">끝:<input type="date" id="end" onchange="periode('END',this.value)"></div>
                <div class="col-6"><span class="button primary fit" onclick="submitfn('costom/device',null)">불러오기</span></div>
                <div class="col-6"><span class="button fit" onclick="downloadFile()">저장하기</span></div>
            </div>            
        </section>
        <hr>
        <section>
            <div class="row gtr-uniform" id="chartForm">                
            </div>                    
        </section>
        
    </div>
</div>